name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Native Rust tests
  test-native:
    name: Test Native
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, 1.70, 1.75]
        target: [x86_64-unknown-linux-gnu, x86_64-apple-darwin]
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu
          - rust: stable
            target: x86_64-apple-darwin
          - rust: 1.70
            target: x86_64-unknown-linux-gnu
          - rust: 1.75
            target: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config

      - name: Check code
        run: cargo check --all-features

      - name: Run tests
        run: cargo test --all-features --target ${{ matrix.target }}

      - name: Run clippy
        run: cargo clippy --all-features -- -D warnings

      - name: Check formatting
        run: cargo fmt -- --check

  # WASM tests
  test-wasm:
    name: Test WASM
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: Install wasm-pack
        uses: actions-rs/install@v0.1
        with:
          crate: wasm-pack
          version: v0.12.1
          use-tool-cache: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-wasm-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-wasm-cargo-

      - name: Build WASM
        run: |
          cd aegis_crypto_core
          wasm-pack build --target web --out-dir pkg

      - name: Run WASM tests
        run: |
          cd aegis_crypto_core
          wasm-pack test --headless --firefox

  # Browser tests
  test-browser:
    name: Test Browser
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: Install wasm-pack
        uses: actions-rs/install@v0.1
        with:
          crate: wasm-pack
          version: v0.12.1
          use-tool-cache: true

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Build WASM for browser
        run: |
          cd aegis_crypto_core
          wasm-pack build --target web --out-dir pkg

      - name: Run browser tests
        run: |
          cd aegis_crypto_core
          npm install
          npm test

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cargo-audit
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-audit
          version: v0.18.1
          use-tool-cache: true

      - name: Run security audit
        run: cargo audit --deny warnings

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run benchmarks
        run: |
          cd aegis_crypto_core
          cargo bench --no-run

  # Build and package
  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test-native, test-wasm, security-audit]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: Install wasm-pack
        uses: actions-rs/install@v0.1
        with:
          crate: wasm-pack
          version: v0.12.1
          use-tool-cache: true

      - name: Build WASM package
        run: |
          cd aegis_crypto_core
          wasm-pack build --release --target web --out-dir pkg

      - name: Build WASM package for Node.js
        run: |
          cd aegis_crypto_core
          wasm-pack build --release --target nodejs --out-dir pkg-node

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasm-packages
          path: |
            aegis_crypto_core/pkg/
            aegis_crypto_core/pkg-node/

  # Publish to npm (on release)
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: build-package
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Download WASM artifacts
        uses: actions/download-artifact@v3
        with:
          name: wasm-packages
          path: aegis_crypto_core/

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      - name: Publish to NPM
        run: |
          cd aegis_crypto_core
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Publish to crates.io (on release)
  publish-crates:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: build-package
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --package aegis_crypto_core
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
