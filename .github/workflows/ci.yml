name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Rust Tests
  rust-tests:
    name: Rust Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable, beta, nightly]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-features

    - name: Build WASM package
      run: |
        cd aegis_crypto_core
        wasm-pack build --target web --out-dir pkg --features wasm,nist-wasm

    - name: Test WASM build
      run: |
        cd aegis_crypto_core
        wasm-pack test --headless --firefox

  # Node.js Tests
  node-tests:
    name: Node.js Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm test

    - name: Build package
      run: npm run build

    - name: Test package installation
      run: |
        npm pack
        npm install aegis-crypto-core-*.tgz
        node -e "console.log('Package installed successfully')"

  # WASM Implementation Tests
  wasm-tests:
    name: WASM Implementation Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build WASM package
      run: |
        cd aegis_crypto_core
        wasm-pack build --target web --out-dir pkg --features wasm,nist-wasm

    - name: Test all WASM implementations
      run: |
        node archive/test_wasm_implementations.js

    - name: Run basic usage examples
      run: |
        node examples/basic-usage.js

    - name: Run performance benchmarks
      run: |
        node examples/performance-benchmark.js

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Check for known vulnerabilities
      run: |
        cd aegis_crypto_core
        cargo audit

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Generate documentation
      run: |
        cargo doc --all-features --no-deps
        cd aegis_crypto_core
        cargo doc --features wasm,nist-wasm --no-deps

    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  # Build and Test Package
  package-test:
    name: Package Test
    runs-on: ubuntu-latest
    needs: [rust-tests, node-tests, wasm-tests, security-audit]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build WASM package
      run: |
        cd aegis_crypto_core
        wasm-pack build --target web --out-dir pkg --features wasm,nist-wasm

    - name: Test package structure
      run: |
        npm pack --dry-run

    - name: Test package installation
      run: |
        npm pack
        npm install aegis-crypto-core-*.tgz
        node -e "import('aegis-crypto-core').then(() => console.log('âœ… Package works!'))"

  # Publish to NPM
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [package-test]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build WASM package
      run: |
        cd aegis_crypto_core
        wasm-pack build --target web --out-dir pkg --features wasm,nist-wasm

    - name: Publish to NPM
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Publish to crates.io
  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [package-test]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Publish to crates.io
      run: |
        cd aegis_crypto_core
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
